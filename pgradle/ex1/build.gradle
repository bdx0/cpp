apply plugin: "cpp"
// http://georgik.sinusgear.com/wp-content/talks/2014-04-28-gradle-and-build-systems-for-c-language/pdf/2014-04-28-gradle-and-build-systems-for-c-language.pdf
// http://www.hellsoft.se/android/android-ndk-and-the-gradle-build-system
// http://carlosvin.github.io/en/posts/gradle-cpp.html
// http://ph0b.com/android-studio-gradle-and-ndk-integration
// http://www.sureshjoshi.com/mobile/android-ndk-in-android-studio-with-swig/
// https://dzone.com/articles/cross-language-benchmarking-%E2%80%93
// https://docs.gradle.org/current/userguide/nativeBinaries.html
// http://arveknudsen.com/?p=163%3Fpage_id%3D163&print=print
model {
    components {
        hello(NativeExecutableSpec){
            sources {
                cpp {
                    source {
                        srcDir "src/hello/cpp/"
                    }
                }
            }
            binaries.all { binary -> 
                binary.tasks.all {
                    if (it.getName() == "installDebugCommunityHelloExecutable") {
                    println it.outputs.files.files
                    }
                }
            }
        }
        main(NativeExecutableSpec){
        }
    }
   
    buildTypes {
        debug
        release
    }

    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
        itanium {
            architecture "ia-64"
        }
    }

    flavors {
        community
        enterprise
    }

}


task run(dependsOn: 'installDebugCommunityHelloExecutable') << {
    println "======== Run ============"
    def installed_dir = tasks.findByName('installDebugCommunityHelloExecutable').outputs.files.files[0]
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir installed_dir
        commandLine 'cmd', '/c', 'hello.bat'
        standardOutput  = stdout;
    } 
    println "Ouput:\n$stdout";
}

task run1(dependsOn: 'build') << {
    println 'I\'m a running task'
    println '$buildDir'
    println project.buildscript.sourceFile
    println System.getProperty('user.dir')
    println buildFile
    println buildFile.parent
    println projectDir
}

// Example about custom task
// http://www.drdobbs.com/jvm/writing-build-scripts-with-gradle/240168648

task hello(type: Exec) << {
  executable "sh"
  args "-c", "echo 'hello from your shell'"
}
def doMyThing(String target) {
    exec {
        executable "something.sh"
        args "-t", target
    }
}

task doIt << {
    doLast {
        doMyThing("/tmp/foo")
        doMyThing("/tmp/gee")
    }
}

// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html
task stopTomcat(type:Exec) << {
  workingDir '../tomcat/bin'

  //on windows:
  commandLine 'cmd', '/c', 'stop.bat'

  //on linux
  commandLine './stop.sh'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}
